#!/bin/bash

# Exit silently if CUDA is installed.
[[ -f /usr/local/cuda/include/cuda.h ]] && exit 0

name="ffmpeg"
branch="release/5.1"
echo "building ${name} branch ${branch}"

mkdir -p builddir && cd builddir || exit $?
builddir="${PWD}"
cleanup(){
cd "${builddir}" ; rm -fr "${name}" && echo -e "\nDirectory cleaned!";
}
trap cleanup EXIT

find . -type f -mtime +1 -exec rm -rf {} \;

if [[ ! -f ${name}.tar.gz ]]; then
    url="https://git.ffmpeg.org/ffmpeg.git"
    echo "git clone --depth 1 --branch ${branch} ${url}"
    if ! git clone --depth 1 --branch ${branch} ${url}; then
        echo something wrong with git clone, skipping...
        exit 1
    fi
    tar czf ${name}.tar.gz ${name}
else
    tar xzf ${name}.tar.gz
fi

if [[ -d ${name} ]]; then
    # check /opt/nvidia/{lib64,lib}
    if [[ -f /opt/nvidia/lib64/libGL.so ]]; then
        ldflags="-Wl,-rpath=/usr/local/lib:/opt/nvidia/lib64 -flto=auto -fuse-linker-plugin"
    else
        ldflags="-Wl,-rpath=/usr/local/lib:/opt/nvidia/lib -flto=auto -fuse-linker-plugin"
    fi

    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
    export LD_LIBRARY_PATH=/usr/local/lib

<<<<<<< HEAD
    cores=$(grep -c '^cpu[0-9]' /proc/stat)
    cd ${name} || exit $?
=======
    cd ${name}
>>>>>>> e19cb842bf8a0e89c0a326ddbeb79b8f3b39d154

    osrel=$(grep VERSION_ID /etc/os-release | cut -f2 -d=)
    if [[ $osrel -ge 36600 && -f /usr/include/lcms2.h ]]; then
        lcms2="--enable-lcms2"
    else
        lcms2=""
    fi

    if [[ -f /opt/nvidia/bin/nvidia-settings ]]; then
        vdpau="--enable-vdpau"
    else
        vdpau=""
    fi

    # Enable Vulkan; doable since Clear Linux 35930 (developer-gpu).
    if [[ -f /usr/include/glslang/SPIRV/GlslangToSpv.h ]]; then
        # Prune glslang libflags from the configure script.
        sed -i \
            -e "s|-lMachineIndependent ||" \
            -e "s|-lOSDependent ||"        \
            -e "s|-lOGLCompiler ||"        \
            -e "s|-lGenericCodeGen ||" configure
        vulkan="--enable-vulkan --enable-libglslang"
    else
        vulkan=""
    fi

    ./configure \
        --prefix=/usr/local \
        --extra-cflags="-I/usr/local/include" \
        --extra-ldflags="-L/usr/local/lib -L/opt/nvidia/lib64 -L/opt/nvidia/lib ${ldflags}" \
        --extra-libs="-lpthread -lm" \
        --ar=gcc-ar --disable-amd3dnow --disable-debug --disable-podpages \
        --disable-static --enable-shared --enable-pthreads \
        --enable-hardcoded-tables --arch=x86_64 --enable-x86asm \
        --enable-avcodec --enable-bzlib --enable-gcrypt --enable-gmp \
        --enable-gnutls --enable-fontconfig $lcms2 --enable-libaom \
        --enable-libass --enable-libdav1d --enable-libdrm --enable-libfdk-aac \
        --enable-libfreetype --enable-libfribidi --enable-libmfx --enable-libmp3lame \
        --enable-libopus --enable-libpulse --enable-librsvg --enable-libspeex \
<<<<<<< HEAD
        --enable-libsvtav1 --enable-libtheora --enable-libv4l2 \
        --enable-libvidstab --enable-libvmaf --enable-libvorbis \
        --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 \
        --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm \
        --enable-libxcb-xfixes --enable-libxml2 --enable-libxvid \
        --enable-opengl --enable-postproc --enable-sdl2 --enable-vaapi "$vdpau" "$vulkan" \
=======
        --enable-libsvtav1 --enable-libtheora --enable-libv4l2 --enable-libvidstab \
        --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp \
        --enable-libx264 --enable-libx265 --enable-libxcb --enable-libxcb-shape \
        --enable-libxcb-shm --enable-libxcb-xfixes --enable-libxml2 --enable-libxvid \
        --enable-opengl --enable-pixelutils --enable-postproc --enable-rdft \
        --enable-sdl2 --enable-vaapi $vdpau $vulkan \
>>>>>>> e19cb842bf8a0e89c0a326ddbeb79b8f3b39d154
        --enable-zlib --enable-ffplay --enable-gpl --enable-nonfree \
        --enable-version3 --enable-lto || exit $?

    # The libva-vdpau-driver always assumes the connection type "X11".
    if [[ -f /opt/nvidia/bin/nvidia-settings ]]; then
        sed -i 's/^#define HAVE_VAAPI_DRM 1/#define HAVE_VAAPI_DRM 0/' config.h
    fi

<<<<<<< HEAD
    make -j "${cores}" && make install
=======
    make -j && make install
>>>>>>> e19cb842bf8a0e89c0a326ddbeb79b8f3b39d154
fi

